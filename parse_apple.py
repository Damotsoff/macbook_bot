import logging
import requests
import psycopg2
from apple import parse
from humor import anecdot
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
#–í–ù–ò–ú–ê–ù–ò–ï –ó–î–ï–°–¨ –ü–†–û–ò–°–•–û–î–ò–¢ –ò–ú–ü–†–û–¢ –ú–û–ï–ì–û –¢–û–ö–ï–ù–ê –ò–ó –§–ê–ô–õ–ê CONFIG.PY –£ –í–ê–° –≠–¢–û–ì–û –§–ê–ô–õ–ê –ù–ï–¢, –ü–û–≠–¢–û–ú–£ –õ–ò–ë–û –°–û–ó–î–ê–ô–¢–ï –ò –ó–ê–ù–ï–°–ò–¢–ï –¢–û–ö–ï–ù –¢–£–î–ê 
#–õ–ò–ë–û –ü–†–û–°–¢–û –£–î–ê–õ–ò –≠–¢–û–¢ –ò–ú–ü–û–†–¢  –ò –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù –ù–ê–ü–†–Ø–ú–£–Æ –í –ü–ï–†–ï–ú–ï–ù–ù–£–Æ bot –∫–æ—Ç–æ—Ä–∞—è  –Ω–∏–∂–µ(12 —Å—Ç—Ä–æ–∫–∞)
from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)


def read_to_db(user_name,user_id,title,price):
    #–¢–£–¢ –ù–£–ñ–ù–û –í–ù–ï–°–¢–ò –î–ê–ù–ù–´–ï –û–¢ –°–í–û–ï–ô –ë–ê–ó–´ 
    conn = psycopg2.connect(dbname='test',user='geo',password='12345',host='localhost')
    cursor =conn.cursor()
    cursor.execute('truncate tgtest cascade ;')
    cursor.execute("INSERT INTO tgtest(user_name ,user_id,title_mac,price) VALUES(%s,%s,%s,%s)",(user_name,user_id,title,price))
    conn.commit()
    cursor.close()
    conn.close()

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ú–æ–¥–µ–ª–∏ –∏ —Ü–µ–Ω—ãüî´", "–ö—É—Ä—Å –≤–∞–ª—é—Çüíµ", '–†–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—ÇüòÇ']
    keyboard.add(*buttons)
    await message.answer("–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º?", reply_markup=keyboard)


@dp.message_handler(Text(equals='–ú–æ–¥–µ–ª–∏ –∏ —Ü–µ–Ω—ãüî´'))
async def model_and_price(message: types.Message):
    result = parse()
    for name, price, image in result:
        read_to_db(str(message.from_user.first_name),str(message.from_user.id),name,price)
        await message.answer(f'{name}\n\n –¶–µ–Ω–∞: {price}\n{image}')

@dp.message_handler(Text(equals='–ö—É—Ä—Å –≤–∞–ª—é—Çüíµ'))
async def dollar(message: types.Message):
    data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
    dollar_rate = data['Valute']['USD']['Value']
    await message.answer(f'***–ö–£–†–° –î–û–õ–õ–ê–†–ê***  {dollar_rate}')

@dp.message_handler(Text(equals='–†–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–µ–∫–¥–æ—ÇüòÇ'))
async def sugar(message: types.message.Message):
    await message.answer(anecdot())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)